package ledger;
import java.time.LocalDateTime; //used in date n time setting
import java.time.format.DateTimeFormatter;//used in date n time setting
import java.util.Scanner;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;


public class ReminderSystem {

    private LocalDateTime startDate;
    private double outstanding_balance;
    private boolean isAlertShown;
    public ReminderSystem (LocalDateTime startDate, double outstanding_balance){

        this.startDate = startDate;
        this.outstanding_balance = outstanding_balance;
        this.isAlertShown = false;
    }

    public void checkAndShowReminder(){
        if(outstanding_balance <=0){
            return; // no reminder needed if no balance
        }

        LocalDateTime now = LocalDateTime.now();
        long daysUntilDue = ChronoUnit.DAYS.between(now, startDate);

        if(!isAlertShown){ // show reminder only once per login session
            if(daysUntilDue <=0){
                System.out.println("\n=== PAYMENT REMINDER ===");
                System.out.println("Your loan payment of RM"+ String.format("%.2f", outstanding_balance)+ " is OVERDUE.");
                System.out.println("Please make the payment as soon as possible to avoid account restrictions.");
                System.out.println("==========================\n");

            } else if(daysUntilDue <= 7){
                System.out.println("\n=== PAYMENT REMINDER ===");
                System.out.println("Your next loan payment of RM"+ String.format("%.2f", outstanding_balance)+ " is due in "+ daysUntilDue + " days.");
                if(daysUntilDue <= 3){
                    System.out.println("please ensure timely payment to avoid account restrictions.");

                }
                System.out.println("==========================\n");
            } else if (daysUntilDue <= 14){
                System.out.println("\n=== PAYMENT REMINDER ===");
                System.out.println("Your next loan payment of RM"+ String.format("%.2f", outstanding_balance)+ " is due in "+ daysUntilDue + " days.");
                System.out.println("==========================\n");
            }
            isAlertShown = true;
        }
    }

    public void updateStartDate(LocalDateTime newStartDate){
        this.startDate = newStartDate;
    }

    public void updateBalance(double newBalance){
        this.outstanding_balance = newBalance;
    }

    public void resetAlertFlag(){
        this.isAlertShown = false;
    }

public static void main(String[] args){
    System.out.println("Enter your userID: ");
    Scanner sc = new Scanner(System.in);
    int userID = sc.nextInt();
    selectSQL selectsql = new selectSQL(userID);
    double outstanding_balance = selectsql.selectFromSQL();
    LocalDateTime startDate = selectsql.selectDateFromSQL();
    ReminderSystem reminderSystem = new ReminderSystem(startDate, outstanding_balance);
    reminderSystem.checkAndShowReminder();
}
}
class selectSQL{
    private static int USERID;
    private static final String MySQL_URL = "jdbc:mysql://127.0.0.1:3306/ledger?useUnicode=true&characterEncoding=utf8&useSSL=false";
    private static final String MySQL_USER = "root";
    private static final String MySQL_PASSWORD = "123456";

    private Connection conn;
    private PreparedStatement pstmt;
    private ResultSet resultSet;

    public static int getUSERID() {
        return USERID;
    }

    public static void setUSERID(int USERID) {
        selectSQL.USERID = USERID;
    }

    public selectSQL(int userID){
        this.USERID = userID;
        this.conn = null;
        this.pstmt = null;
        this.resultSet = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection(MySQL_URL, MySQL_USER, MySQL_PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
public double selectFromSQL(){
        String select = "SELECT outstanding_balance FROM LOANS WHERE user_id = ?";
        try{
            pstmt = conn.prepareStatement(select);
            pstmt.setInt(1, USERID);
            resultSet = pstmt.executeQuery();
            if(resultSet.next()){
                return resultSet.getDouble("outstanding_balance");
            }
            else System.out.println("FIALED");
            return -1;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }


}
    public LocalDateTime selectDateFromSQL() {
        String select = "SELECT repay_at FROM LOANS WHERE user_id = ?";
        try {
            pstmt = conn.prepareStatement(select);
            pstmt.setInt(1, USERID);
            resultSet = pstmt.executeQuery();
            if (resultSet.next()) {
                String dateTimeString = resultSet.getString("repay_at");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                return LocalDateTime.parse(dateTimeString, formatter);
            } else {
                System.out.println("FAILED");
                return null;
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
